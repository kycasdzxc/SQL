SELECT * FROM USER_TABLES; -- STUDENT 계정
SELECT * FROM ALL_TABLES; -- 접근 가능한 외부 스키마도 포함
SELECT * FROM DBA_TABLES; -- DBA 권한이 없다. 관리자 권한이 있는 계정만 가능

SELECT * FROM USER_SEQUENCES;

SELECT * FROM USER_VIEWS;

SELECT * FROM USER_INDEXES;

SELECT * FROM USER_CONSTRAINTS; -- 제약조건

SELECT 'SELECT * FROM ' || TABLE_NAME || ';' FROM DICTIONARY WHERE TABLE_NAME LIKE 'USER%';

SELECT 'SELECT ' || COLUMN_NAME || 'FROM TBL_BOARD;' FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'TBL_BOARD';

-- 데이터 무결성
-- 친구등록
-- REQUESTER, RESPCNSER
-- ID1        ID2
-- ID2        ID1
-- ID1        ID4
-- ID1        ID3

-- 쪽지발송
-- NO, SENDER, RECEIVER, CONTENT, REGDATE, RECEIVEDATE

CREATE TABLE SUBJECT (
    SUBNO NUMBER(5) CONSTRAINT PK_SUBJECT
    PRIMARY KEY DEFERRABLE INITIALLY DEFERRED,
--    USING INDEX TABLESPACE INDX, ERROR
    SUBNAME VARCHAR2(20)
    CONSTRAINT NN_SUBNAME NOT NULL,
    TERM VARCHAR2(1)
    CONSTRAINT CK_TERM CHECK (TERM IN ('1', '2')),
    TYPE VARCHAR2(1)
);

SELECT * FROM SUBJECT;

ALTER TABLE STUDENT
    ADD CONSTRAINT PK_STUDENT PRIMARY KEY(STUDNO)
;
DROP TABLE SUBJECT;
CREATE TABLE SUGANG (
    STUDNO CONSTRAINT FK_SUGANG_STUDNO REFERENCES STUDENT(STUDNO),
    SUBNO CONSTRAINT FK_SUGANG_SUBNO REFERENCES SUBJECT(SUBNO),
    REGDATE DATE DEFAULT SYSDATE,
    RESULT NUMBER(3),
    CONSTRAINT PK_SUGANG PRIMARY KEY(STUDNO, SUBNO)
);

SELECT * FROM USER_CONSTRAINTS;

-- 학생 테이블 인스턴스를 참조하여 STUDNO에 기본키, IDNUM에 고유키, NAME에 NOT NULL 무결성 제약조건을 추가하여라.
ALTER TABLE STUDENT ADD CONSTRAINT UK_IDNUM UNIQUE(IDNUM);
ALTER TABLE STUDENT ADD CONSTRAINT UK_USERID UNIQUE(USERID);
ALTER TABLE STUDENT MODIFY (NAME CONSTRAINT NN_NAME NOT NULL);

-- 학과 테이블에 PK
ALTER TABLE DEPARTMENT MODIFY(DEPTNO CONSTRAINT PK_DEPARTMENT PRIMARY KEY);

-- FK 추가
-- 학과 테이블에 PK가 없어서 ERROR. 그래서 위에 꺼 추가
ALTER TABLE STUDENT MODIFY (DEPTNO CONSTRAINT FK_DEPTNO REFERENCES DEPARTMENT(DEPTNO));

-- 학과 테이블 COLLEGE에 FK 추가 FK_COLLEGE
ALTER TABLE DEPARTMENT MODIFY (COLLEGE CONSTRAINT FK_COLLEGE REFERENCES DEPARTMENT(DEPTNO));
-- 학과 테이블 DNAME NN 추가 NN_DNAME
ALTER TABLE DEPARTMENT MODIFY (DNAME CONSTRAINT NN_DNAME NOT NULL);

-- 교수 테이블 PROFNO PK 추가 PK_PROFESSOR
ALTER TABLE PROFESSOR MODIFY (PROFNO CONSTRAINT FK_PROFESSOR PRIMARY KEY);
-- 교수 테이블 NAME NN 추가
ALTER TABLE PROFESSOR MODIFY (NAME CONSTRAINT NN_NAME NOT NULL);
ALTER TABLE PROFESSOR DROP CONSTRAINT FK_NAME; -- 제약조건 삭제
-- 교수 테이블 DEPTNO FK 추가
ALTER TABLE PROFESSOR MODIFY (DEPTNO CONSTRAINT FK_FROF_DEPTNO REFERENCES DEPARTMENT(DEPTNO));

-- 학생 테이블 PROFNO FK 추가
ALTER TABLE STUDENT MODIFY (PROFNO CONSTRAINT FK_STUD_PROFNO REFERENCES PROFESSOR(PROFNO));
-- GKRTOD XPDLQMF GRADE CK 추가 (1~4)
ALTER TABLE STUDENT MODIFY (GRADE CONSTRAINT CK_GRADE CHECK(GRADE BETWEEN 1 AND 4));
--ALTER TABLE STUDENT DROP CONSTRAINT SYS_C007025;

SELECT * FROM USER_CONS_COLUMNS;
SELECT * FROM USER_CONSTRAINTS;

DESC SUBJECT;
INSERT INTO SUBJECT VALUES (1001, '자바', '1', NULL);
INSERT INTO SUBJECT VALUES (1001, '자바', '2', NULL); -- 커밋 시, ERROR
SELECT * FROM SUBJECT;

-- 부서 테이블에서 name 칼럼을 고유 인덱스로 생성하여라.
-- 단, 교유 인덱스의 이름을 idx_dept_name으로 정의한다.
CREATE UNIQUE INDEX IDX_DEPT_DNAME ON DEPARTMENT(DNAME);

SELECT * FROM USER_INDEXES;

-- 기본키 생성 : 해당 컬럼으로 NN, UK, UNIQUE INDEX 추가

SELECT * FROM DEPARTMENT
WHERE DNAME > '가';

SELECT /*+ INDEX(D PK_DEPARTMENT) */ * FROM DEPARTMENT D;

DESC TBL_BOARD;
-- PK_BOARD 기본키 추가. BNO
ALTER TABLE TBL_BOARD MODIFY (BNO CONSTRAINT PK_BOARD PRIMARY KEY);

SELECT * FROM (
    SELECT A.*, ROWNUM RN FROM (
        SELECT * FROM TBL_BOARD B ORDER BY BNO DESC
    ) A WHERE ROWNUM <= 30
)
WHERE RN > 20;

SELECT * FROM (
    SELECT /*+ INDEX_DESC(A PK_BOARD) */  A.*, ROWNUM RN FROM TBL_BOARD A WHERE ROWNUM <= 30
)
WHERE RN > 20;

-- 학생 테이블의 BIRTHDATE 칼럼을 비고유인덱스로 생성하여라.
-- 비고유인덱스의 이름은 IDX_STUD_BIRTHDATE로 정의한다.

CREATE INDEX IDX_STUD_BIRTHDATE ON STUDENT(BIRTHDATE);

SELECT * FROM STUDENT WHERE BIRTHDATE = '79/07/02';

-- 학생 테이블의 DEPTNO, GRADE 칼럼을 결합인덱스로 생성하여라.
-- 결합인덱스의 이름은 IDX_STUD_DNO_GRADE로 정의한다.
CREATE INDEX IDX_STUD_DNO_GRADE ON STUDENT(DEPTNO, GRADE);
DROP INDEX IDX_STUD_DNO_GRADE;

SELECT * FROM USER_INDEXES;

SELECT * FROM STUDENT WHERE DEPTNO = 101 AND GRADE = 4;

-- 학생 테이블의 DEPTNO와 NAME 칼럼으로 결합인덱스를 생성하여라.
-- 단, DEPTNO 칼럼을 내림차순으로 NAME 칼럼은 오름차순으로 생성하여라.
CREATE INDEX IDX_STUD_DNO_NAME ON STUDENT(DEPTNO DESC, NAME);

SELECT * FROM STUDENT WHERE DEPTNO > 0 AND NAME > '가';

SELECT /*+ INDEX(STUDENT IDX_STUD_DNO_NAME) */ * FROM STUDENT;

SELECT * FROM USER_INDEXES;

SELECT *
FROM USER_INDEXES
JOIN USER_IND_COLUMNS USING(INDEX_NAME);

SELECT * FROM DICT WHERE TABLE_NAME LIKE 'USER%IND%';

-- 학번, 이름, 학과번호, 교수번호를 가지는 STUD_TMP 테이블 생성하여라.
DROP TABLE STUD_TMP;
CREATE VIEW STUD_TMP AS ( -- 권한 불충분 ERROR. SYSTEM에서 권한 부여
    SELECT STUDNO, NAME, DEPTNO, PROFNO
    FROM STUDENT
);

CREATE OR REPLACE VIEW STUD_TMP AS ( -- 권한 불충분 ERROR. SYSTEM에서 권한 부여
    SELECT STUDNO, NAME, DEPTNO, PROFNO
    FROM STUDENT
);

SELECT * FROM STUD_TMP;

SELECT * FROM USER_VIEWS; -- VIEW는 바로가기 아이콘 같다.

INSERT INTO STUD_TMP VALUES (12345, '김김김', 101, NULL);
INSERT INTO STUD_TMP VALUES (NULL, '김김김', 101, NULL); -- ERROR
INSERT INTO STUD_TMP VALUES (10001, '김김김', 101, NULL); -- ERROR

SELECT * FROM HR.EMPLOYEES A
JOIN DEPARTMENT B ON A.EMPLOYEE_ID = B.DEPTNO;

--
DROP TABLE STUD_TMP2;

CREATE OR REPLACE FORCE VIEW STUD_TMP AS ( -- 권한 불충분 ERROR. SYSTEM에서 권한 부여
    SELECT STUDNO, NAME, DEPTNO, PROFNO
    FROM STUDEN
);
SELECT * FROM STUD_TMP; -- EEROR

-- 학생 테이블과 부서 테이블을 조인하여 102번 학과 학생들의 학번, 이름, 학년, 학과 이름으로 정의되는 복합 뷰를 생성하여라.
CREATE OR REPLACE VIEW VIEW_COMP_TEST AS
SELECT STUDNO, NAME, GRADE, DNAME
FROM STUDENT NATURAL JOIN DEPARTMENT;

SELECT * FROM VIEW_COMP_TEST;

INSERT INTO VIEW_COMP_TEST VALUES (12346, '이이이', '3', '컴퓨터공학과'); -- ERROR
DELETE FROM VIEW_COMP_TEST WHERE DNAME IS NULL; -- 삭제가 안된다.

SELECT * FROM STUDENT;

-- 학생의 탄생연도별 인원수를 구하여라. 그리고 이 데이터를 사용해 VIEW_COMP_TEST2라는 VIEW를 생성하여라.
CREATE OR REPLACE VIEW VIEW_COMP_TEST2 AS -- ERROR 별칭 다 줘야 함.
SELECT TO_CHAR(BIRTHDATE, 'YYYY') BIRTH, COUNT(*) CNT
FROM STUDENT
GROUP BY TO_CHAR(BIRTHDATE, 'YYYY')
HAVING TO_CHAR(BIRTHDATE, 'YYYY') IS NOT NULL
ORDER BY 1;

SELECT * FROM VIEW_COMP_TEST2;
DELETE VIEW_COMP_TEST2 WHERE BIRTH = 1980; -- ERROR 발생

-- 인라인 뷰를 사용하여 학과 별로 학생들의 평균 키와 평균 몸무게, 학과 이름을 출력하여라.
SELECT AH, AW, DNAME
FROM (
    SELECT DEPTNO, AVG(HEIGHT) AH, AVG(WEIGHT) AW
    FROM STUDENT
    GROUP BY DEPTNO
) NATURAL JOIN DEPARTMENT;

SELECT * FROM HR.EMPLOYEES;
SELECT * FROM EMPS;

CREATE SYNONYM EMPS FOR HR.EMPLOYEES; -- 권한 만들어줘야 함
DROP SYNONYM EMPS;

SELECT -- DEPTNO, DNAME, COLLEGE, LEVEL
LPAD(' ', LEVEL*2) || DNAME D
FROM DEPARTMENT
START WITH DEPTNO = 10
CONNECT BY PRIOR DEPTNO = COLLEGE
ORDER BY LEVEL;