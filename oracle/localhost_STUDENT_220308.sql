INSERT INTO DEPARTMENT(DEPTNO, DNAME)
VALUES (900, '생명공학부');

INSERT INTO DEPARTMENT
VALUES (301, '환경보건학과', '', NULL);

SELECT * FROM DEPARTMENT
WHERE DEPTNO = 301;

INSERT INTO PROFESSOR(PROFNO, NAME, POSITION, HIREDATE, DEPTNO)
VALUES (9920, '최윤식', '조교수', TO_DATE('2006/01.01', 'YYYY/MM/DD'), 102);

SELECT * FROM PROFESSOR;

INSERT INTO PROFESSOR
VALUES (9910, '백미선', 'white', '전임강사', 200, SYSDATE, 10, 101);

CREATE TABLE TBL_BOARD (
    BNO NUMBER,
    TITLE VARCHAR2(1000),
    CONTENT CLOB,
    HITCOUNT NUMBER DEFAULT 0,
    REGDATE DATE DEFAULT SYSDATE,
    WRITER VARCHAR2(200)
);

CREATE SEQUENCE SEQ_BOARD;

SELECT COUNT(*) FROM TBL_BOARD;
SELECT * FROM TBL_BOARD;
TRUNCATE TABLE TBL_BOARD;

INSERT INTO TBL_BOARD (BNO, TITLE, CONTENT, WRITER) VALUES (SEQ_BOARD.NEXTVAL, '제목1', '내용1', 'javaman');
INSERT INTO TBL_BOARD (BNO, TITLE, CONTENT, WRITER) VALUES (SEQ_BOARD.NEXTVAL, '제목2', '내용2', 'babamba');
INSERT INTO TBL_BOARD (BNO, TITLE, CONTENT, WRITER) VALUES (SEQ_BOARD.NEXTVAL, '제목3', '내용3', 'amanna');
INSERT INTO TBL_BOARD (BNO, TITLE, CONTENT, WRITER) VALUES (SEQ_BOARD.NEXTVAL, '제목4', '내용4', 'odoung');
INSERT INTO TBL_BOARD (BNO, TITLE, CONTENT, WRITER) VALUES (SEQ_BOARD.NEXTVAL, '제목5', '내용5', 'kyoungbow');

INSERT INTO TBL_BOARD
SELECT * FROM TBL_BOARD;

INSERT INTO TBL_BOARD(BNO, TITLE, CONTENT, WRITER)
SELECT SEQ_BOARD.NEXTVAL, TITLE, CONTENT, WRITER FROM TBL_BOARD;

SELECT * FROM TBL_BOARD ORDER BY 1 DESC;

-- 한 페이지에 10개씩 보여주기
SELECT *
FROM (
    SELECT A.*, ROWNUM RN
    FROM (
        SELECT * FROM TBL_BOARD ORDER BY 1 DESC
    ) A
    WHERE ROWNUM <= 20
)
WHERE RN > 10;

-- 다중 행 입력을 위한 height_info, weight_info 예제 테이블 생성
CREATE TABLE HEIGHT_INFO (
    STUDNO NUMBER,
    NAME VARCHAR2(10),
    HEIGHT NUMBER
);

CREATE TABLE WEIGHT_INFO (
    STUDNO NUMBER,
    NAME VARCHAR2(10),
    WEIGHT NUMBER
);

TRUNCATE TABLE HEIGHT_INFO;
TRUNCATE TABLE WEIGHT_INFO;

INSERT ALL
INTO HEIGHT_INFO VALUES (STUDNO, NAME, HEIGHT)
INTO WEIGHT_INFO VALUES (STUDNO, NAME, WEIGHT)
SELECT * FROM STUDENT WHERE GRADE = '2';

SELECT * FROM HEIGHT_INFO;
SELECT * FROM WEIGHT_INFO;

-- 학생 테이블에서 2학년 이상의 학생을 검색하여
-- HEIGHT_INFO 테이블에는 키가 170보다 큰 학생의 학번, 이름, 키를 입력하고
-- WEIGHT_INFO 테이블에는 몸무게가 70보다 큰 학생의 학번, 이름, 몸무게를 각각 입력하여라.

INSERT ALL
WHEN HEIGHT > 170 THEN
INTO HEIGHT_INFO VALUES (STUDNO, NAME, HEIGHT)
WHEN WEIGHT > 70 THEN
INTO WEIGHT_INFO VALUES (STUDNO, NAME, WEIGHT)
SELECT * FROM STUDENT WHERE GRADE >= '2';

INSERT FIRST
WHEN HEIGHT > 170 THEN
INTO HEIGHT_INFO VALUES (STUDNO, NAME, HEIGHT)
WHEN WEIGHT > 70 THEN
INTO WEIGHT_INFO VALUES (STUDNO, NAME, WEIGHT)
SELECT * FROM STUDENT WHERE GRADE >= '2';

CREATE TABLE SALES (
    SALES_NO    NUMBER,
    WEEK_NO     NUMBER,
    SALES_MON   NUMBER,
    SALES_TUE   NUMBER,
    SALES_WED   NUMBER,
    SALES_THU   NUMBER,
    SALES_FRI   NUMBER
);

INSERT INTO SALES VALUES (1101, 4, 100, 150, 80, 60, 120);
INSERT INTO SALES VALUES (1102, 5, 300, 300, 230, 120, 150);

CREATE TABLE SALES_DATA (
    SALES_NO    NUMBER,
    WEEK_NO     NUMBER,
    DAY_NO      NUMBER,
    SALES       NUMBER
);

INSERT ALL
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, 1, SALES_MON)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, 2, SALES_TUE)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, 3, SALES_WED)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, 4, SALES_THU)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, 5, SALES_FRI)
SELECT * FROM SALES;

SELECT * FROM SALES_DATA ORDER BY 2, 3;
-- SALES_DATA를 기반으로 주차별 평균 매출, 매출 합 구하시오.

SELECT WEEK_NO, AVG(SALES) 평균매출, SUM(SALES) 매출합계
FROM SALES_DATA
GROUP BY WEEK_NO;

SELECT * FROM SALES_DATA ORDER BY 2, 3;

SELECT SALES_NO, WEEK_NO, DAY_NO, SALES FROM SALES_DATA ORDER BY 2, 3;

SELECT
    SALES_NO,
    WEEK_NO,
    MAX(CASE WHEN DAY_NO = 1 THEN SALES END) SALES_MON,
    MAX(CASE WHEN DAY_NO = 2 THEN SALES END) SALES_TUE,
    MAX(CASE WHEN DAY_NO = 3 THEN SALES END) SALES_WED,
    MAX(CASE WHEN DAY_NO = 4 THEN SALES END) SALES_THU,
    MAX(CASE WHEN DAY_NO = 5 THEN SALES END) SALES_FRI
FROM SALES_DATA
GROUP BY SALES_NO, WEEK_NO;

SELECT SALES_NO, WEEK_NO, 1 DAY_NO, SALES_MON SALES FROM SALES UNION
SELECT SALES_NO, WEEK_NO, 2 DAY_NO, SALES_TUE SALES FROM SALES UNION
SELECT SALES_NO, WEEK_NO, 3 DAY_NO, SALES_WED SALES FROM SALES UNION
SELECT SALES_NO, WEEK_NO, 4 DAY_NO, SALES_THU SALES FROM SALES UNION
SELECT SALES_NO, WEEK_NO, 5 DAY_NO, SALES_FRI SALES FROM SALES;

-- 달력 만들기
SELECT
    TRUNC((RN-1)/7) + 1 WEEK,
    MAX(CASE WHEN MOD(RN, 7) = 1 THEN RN END) 월,
    MAX(CASE WHEN MOD(RN, 7) = 2 THEN RN END) 화,
    MAX(CASE WHEN MOD(RN, 7) = 3 THEN RN END) 수,
    MAX(CASE WHEN MOD(RN, 7) = 4 THEN RN END) 목,
    MAX(CASE WHEN MOD(RN, 7) = 5 THEN RN END) 금,
    MAX(CASE WHEN MOD(RN, 7) = 6 THEN RN END) 토,
    MAX(CASE WHEN MOD(RN, 7) = 0 THEN RN END) 일
FROM (
    SELECT ROWNUM RN
    FROM DICT
    WHERE ROWNUM <= TO_CHAR(LAST_DAY('2022-02-08'), 'dd')
)
GROUP BY TRUNC((RN-1)/7)
ORDER BY TRUNC((RN-1)/7);

SELECT TO_CHAR(LAST_DAY('2022-02-08'), 'DD') + TO_CHAR(NEXT_DAY(ADD_MONTHS(LAST_DAY('2022-02-08'), -1), '일'))
FROM DUAL;

SELECT TO_CHAR(NEXT_DAY(ADD_MONTHS(LAST_DAY('2022-03-07'), -1), '일'), 'DD') FROM DUAL;

SELECT
    TRUNC(RN/7) WEEK,
    MAX(CASE WHEN MOD(RN, 7) = 0 THEN
        CASE WHEN RN > FD THEN RN-FD END END) 일,
    MAX(CASE WHEN MOD(RN, 7) = 1 THEN
        CASE WHEN RN > FD THEN RN-FD END END) 월,
    MAX(CASE WHEN MOD(RN, 7) = 2 THEN
        CASE WHEN RN > FD THEN RN-FD END END) 화,
    MAX(CASE WHEN MOD(RN, 7) = 3 THEN
        CASE WHEN RN > FD THEN RN-FD END END) 수,
    MAX(CASE WHEN MOD(RN, 7) = 4 THEN
        CASE WHEN RN > FD THEN RN-FD END END) 목,
    MAX(CASE WHEN MOD(RN, 7) = 5 THEN
        CASE WHEN RN > FD THEN RN-FD END END) 금,
    MAX(CASE WHEN MOD(RN, 7) = 6 THEN
        CASE WHEN RN > FD THEN RN-FD END END) 토
FROM (
    SELECT
        ROWNUM RN, D, TO_NUMBER(TO_CHAR(NEXT_DAY(ADD_MONTHS(LAST_DAY(D), -1), '월'), 'DD')) FD,
        TO_NUMBER(TO_CHAR(LAST_DAY(D), 'DD')) LD,
        TO_NUMBER(TO_CHAR(LAST_DAY(D), 'DD')) + TO_NUMBER(TO_CHAR(NEXT_DAY(ADD_MONTHS(LAST_DAY(D), -1), '월'), 'DD')) D2
    FROM (SELECT ROWNUM, '22-03-02' D FROM DICT)
    WHERE ROWNUM <= TO_NUMBER(TO_CHAR(LAST_DAY(D), 'DD')) + TO_NUMBER(TO_CHAR(NEXT_DAY(ADD_MONTHS(LAST_DAY(D), -1), '월'), 'DD'))
)
GROUP BY TRUNC(RN/7)
ORDER BY TRUNC(RN/7);

-- 교수번호가 9903인 교수의 현재 직급을 "부교수"로 정하여라.
UPDATE PROFESSOR SET
POSITION = '부교수'
WHERE PROFNO= 9903;

SELECT * FROM PROFESSOR;

-- 서브쿼리를 이용하여
-- 학번이 10201인 학생의 학년과 학과번호를
-- 10103 학번 학생의 학년과 학과번호와 동일하게 수정하여라.

SELECT STUDNO, GRADE, DEPTNO FROM STUDENT WHERE STUDNO IN (10201, 10103);

UPDATE STUDENT SET
(GRADE, DEPTNO) = (SELECT GRADE, DEPTNO FROM STUDENT WHERE STUDNO = 10103)
WHERE STUDNO = 10201;

-- 학생 테이블에서 학번이 20103인 학생의 데이터를 삭제하여라.
DELETE FROM STUDENT
WHERE STUDNO = 20103;

DELETE STUDENT WHERE DEPTNO = (
SELECT DEPTNO FROM DEPARTMENT WHERE DNAME = '컴퓨터공학과');

CREATE TABLE PROFESSOR_TEMP AS
SELECT *
FROM PROFESSOR
WHERE POSITION = '교수';

SELECT * FROM PROFESSOR_TEMP;

UPDATE PROFESSOR_TEMP SET
POSITION = '명예교수';

INSERT INTO PROFESSOR_TEMP
VALUES (9999, '김도경', 'aron21', '전임강사', 200, SYSDATE, 10, 101);

MERGE INTO PROFESSOR P
USING PROFESSOR_TEMP P2
ON (P.PROFNO = P2.PROFNO)
WHEN MATCHED THEN
    UPDATE SET POSITION = P2.POSITION
WHEN NOT MATCHED THEN
    INSERT VALUES (P2.PROFNO, P2.NAME, P2.USERID, P2.POSITION, P2.SAL, P2.HIREDATE, P2.COMM, P2.DEPTNO);

SELECT * FROM PROFESSOR_TEMP;
SELECT * FROM PROFESSOR;

-- 시퀀스
-- 시작값을 3으로 하고 2씩 증가하는 최대값 100의 SEQUENCE 생성, 단 이름은 SEQ_TEST로 하여라.
CREATE SEQUENCE SEQ_TEST
START WITH 3
INCREMENT BY 2
MAXVALUE 100;

SELECT SEQ_TEST.CURRVAL FROM DUAL; -- ERROR ORA-08002 : 생성하고 바로 하면 안보임
SELECT SEQ_TEST.NEXTVAL FROM DUAL;
SELECT SEQ_TEST.CURRVAL, SEQ_TEST.NEXTVAL FROM DUAL;

CREATE TABLE "my_table" ( -- 소문자 사용하려면 더블쿼티션
    TEST NUMBER
);
DROP TABLE ADDRESS;
SELECT * FROM TBL_TEST;

CREATE TABLE ADDRESS (
    ID NUMBER(3) PRIMARY KEY,
    NAME VARCHAR2(50),
    ADDR VARCHAR2(100),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(100)
);

DESC ADDRESS;

INSERT INTO ADDRESS (ID, NAME, ADDR)
VALUES (101, '고길동', '영등포'); -- NULL도 에러 뜸

INSERT INTO ADDRESS
VALUES (1, 'HGDONG', 'SEOUL', '123-4567', 'GDHONG@CWUNET.AC.KR');

SELECT * FROM ADDRESS;

CREATE TABLE ADDRESS_SECOND(ID, NAME, ADDR, PHONE, E_MAIL) AS
SELECT * FROM ADDRESS;

DROP TABLE ADDRESS_SECOND;
SELECT * FROM ADDRESS_SECOND;

DROP TABLE ADDRESS_THIRD;
CREATE TABLE ADDRESS_THIRD AS
SELECT ID COL1, NAME COL2, ADDR COL3, PHONE COL4, EMAIL COL5 FROM ADDRESS WHERE 1=0;

SELECT * FROM ADDRESS_THIRD;

SELECT * FROM PROFESSOR;

-- PROFNO, NAME, POSITION, SAL, COMM, USERID, HIREDATE, DEPTNO
CREATE TABLE PROF2 AS
SELECT
    PROFNO, NAME, POSITION, SAL, COMM, USERID, HIREDATE, DEPTNO
FROM
    PROFESSOR;
    
SELECT * FROM PROF2;

RENAME PROFESSOR TO PROF;
RENAME PROF2 TO PROFESSOR;