-- 학생들의 탄생 계절별 인원수를 구하라.
SELECT
    SEASON, COUNT(*) COUNT
FROM (
    SELECT
        DECODE(TRUNC(TO_CHAR(BIRTHDATE, 'MM') / 3), 1, '봄', 2, '여름', 3, '가을', '겨울') SEASON
    FROM
        STUDENT
)
GROUP BY SEASON;
-----------------------------------------------------------------------------------------------------------
SELECT
    DECODE(TRUNC(TO_CHAR(BIRTHDATE, 'MM') / 3), 1, '봄', 2, '여름', 3, '가을', '겨울') SEASON, COUNT(*) COUNT
FROM
    STUDENT
GROUP BY DECODE(TRUNC(TO_CHAR(BIRTHDATE, 'MM') / 3), 1, '봄', 2, '여름', 3, '가을', '겨울');
-----------------------------------------------------------------------------------------------------------
SELECT STUDNO, NAME, BIRTHDATE, ADD_MONTHS(BIRTHDATE, -2), TO_CHAR(ADD_MONTHS(BIRTHDATE, -2), 'Q')
FROM STUDENT;

SELECT
    CASE
        WHEN TO_CHAR(ADD_MONTHS(BIRTHDATE, -2), 'Q') = 1 THEN '봄'
        WHEN TO_CHAR(ADD_MONTHS(BIRTHDATE, -2), 'Q') = 2 THEN '여름'
        WHEN TO_CHAR(ADD_MONTHS(BIRTHDATE, -2), 'Q') = 3 THEN '가을'
        ELSE '겨울'
    END SEASON,
    COUNT(*)
FROM STUDENT
GROUP BY TO_CHAR(ADD_MONTHS(BIRTHDATE, -2), 'Q')
ORDER BY TO_CHAR(ADD_MONTHS(BIRTHDATE, -2), 'Q');

SELECT STUDNO, NAME, S.DEPTNO, DNAME
FROM STUDENT S, DEPARTMENT D
WHERE
    S.DEPTNO = D.DEPTNO
    AND STUDNO = 10101
;

-- 10101 학생의 학번, 이름, 학과번호, 학과이름, 담당교수번호, 담당교수 이름
-- STUDENT DEPARTMENT, PROFESSOR
SELECT * FROM STUDENT;

SELECT STUDNO, S.NAME, S.DEPTNO, DNAME, P.PROFNO, P.NAME
FROM STUDENT S, DEPARTMENT D, PROFESSOR P
WHERE
    S.DEPTNO = D.DEPTNO
    AND S.PROFNO = P.PROFNO
    AND STUDNO = 10101
;

SELECT STUDNO, S.NAME, D.DEPTNO, DNAME, S.PROFNO, P.NAME
FROM STUDENT S
JOIN DEPARTMENT D ON S.DEPTNO = D.DEPTNO
JOIN PROFESSOR P ON S.PROFNO = P.PROFNO
WHERE STUDNO = 10101;

SELECT STUDNO, S.NAME, S.DEPTNO, DNAME, PROFNO, P.NAME
FROM STUDENT S
JOIN DEPARTMENT D ON S.DEPTNO = D.DEPTNO
JOIN PROFESSOR P USING (PROFNO)
WHERE STUDNO = 10101;

--SELECT STUDNO, STUDENT.NAME, DEPTNO, DNAME, PROFNO, PROFESSOR.NAME
--FROM STUDENT
--JOIN DEPARTMENT USING (DEPTNO)
--JOIN PROFESSOR USING (PROFNO)
--WHERE STUDNO = 10101;

--SELECT STUDNO, S.NAME, DEPTNO, DNAME, PROFNO, P.NAME
--FROM STUDENT S
--JOIN DEPARTMENT D USING (DEPTNO)
--JOIN PROFESSOR P USING (PROFNO)
--WHERE D.DEPTNO = P.DEPTNO AND STUDNO = 10101; -- ERROR

--SELECT STUDNO, S.NAME, DEPTNO, DNAME, PROFNO, P.NAME -- ERROR
--FROM STUDENT S
--JOIN DEPARTMENT D USING (DEPTNO)
--JOIN PROFESSOR P USING (PROFNO)
--WHERE STUDNO = 10101;

SELECT * FROM STUDENT, DEPARTMENT;

SELECT * FROM STUDENT CROSS JOIN DEPARTMENT; -- 카티션 곱

-- 학생 테이블과 부서 테이블을 EQUI JOIN하여 학번, 이름, 학과번호, 소속학과 이름, 학과위치를 출력하여라.
SELECT STUDNO, NAME, S.DEPTNO, DNAME, LOC
FROM STUDENT S, DEPARTMENT D
WHERE S.DEPTNO = D.DEPTNO;

SELECT STUDNO, NAME, DEPTNO, DNAME, LOC
FROM STUDENT
JOIN DEPARTMENT USING(DEPTNO);

-- NATURAL JOIN을 이용하여 교수번호, 이름, 학과번호, 학과이름을 출력하여라.
--SELECT PROFNO, NAME, DEPTNO, DNAME
--FROM PROFESSOR
--NATURAL DEPARTMENT; -- ERROR
SELECT PROFNO, NAME, DEPTNO, DNAME
FROM PROFESSOR
NATURAL JOIN DEPARTMENT;

-- 교수 테이블과 급여 등급 테이블을 NON-EQUI JOIN하여 교수 별로 급여등급을 출력하여라.
SELECT *
FROM PROFESSOR
JOIN SALGRADE ON SAL BETWEEN LOSAL AND HISAL;

-- 4행 2열짜리 숫자가 저장될 테이블 두 개
CREATE TABLE J1 (
    A NUMBER,
    B NUMBER
);

CREATE TABLE J2 (
    A NUMBER,
    C NUMBER
);

DROP TABLE J1;

INSERT INTO J1 VALUES(1, 1);
INSERT INTO J1 VALUES(2, 2);
INSERT INTO J1 VALUES(3, 3);
INSERT INTO J1 VALUES(4, 4);

INSERT INTO J2 VALUES(1, 5);
INSERT INTO J2 VALUES(2, 6);
INSERT INTO J2 VALUES(5, 6);
INSERT INTO J2 VALUES(NULL, 7);

SELECT * FROM J1;
SELECT * FROM J1, J2;
SELECT * FROM J1 RIGHT JOIN J2 ON J1.A != J2.A;
SELECT * FROM J2;
SELECT * FROM J1 NATURAL JOIN J2;

-- 외부조인★
SELECT DISTINCT PROFNO FROM STUDENT WHERE PROFNO IS NOT NULL ORDER BY 1;

-- 담당교수 무 학생 6 담당교수 유 학생 10 / 3의 교수 지도학생 X

-- 지도 교수가 없는 학생도 출력
SELECT STUDNO, S.NAME, PROFNO, P.NAME
FROM STUDENT S
LEFT JOIN PROFESSOR P USING(PROFNO);

SELECT STUDNO, S.NAME, PROFNO, P.NAME
FROM STUDENT S
RIGHT JOIN PROFESSOR P USING(PROFNO);

SELECT STUDNO, S.NAME, PROFNO, P.NAME
FROM STUDENT S
FULL JOIN PROFESSOR P USING(PROFNO);

SELECT STUDNO, S.NAME, PROFNO, P.NAME
FROM STUDENT S
LEFT JOIN PROFESSOR P USING(PROFNO)
WHERE PROFNO IS NULL;

SELECT STUDNO, S.NAME, PROFNO, P.NAME
FROM STUDENT S
RIGHT JOIN PROFESSOR P USING(PROFNO)
WHERE STUDNO IS NULL;

SELECT STUDNO, S.NAME, PROFNO, P.NAME
FROM STUDENT S
FULL JOIN PROFESSOR P USING(PROFNO)
WHERE STUDNO IS NULL;

SELECT STUDNO, S.NAME, PROFNO, P.NAME
FROM STUDENT S
FULL JOIN PROFESSOR P USING(PROFNO)
WHERE STUDNO IS NULL OR PROFNO IS NULL;

-- 학생 테이블과 교수 테이블을 조인하여 이름, 학년, 지도교수의 이름, 직급을 출력하여라.
-- 단, 지도교수가 배정되지 않은 학생 이름도 함께 출력하여라. (+)로 해보기
SELECT S.NAME, GRADE, P.NAME, POSITION
FROM STUDENT S, PROFESSOR P
WHERE S.PROFNO = P.PROFNO(+);

SELECT S.NAME, GRADE, P.NAME, POSITION
FROM STUDENT S, PROFESSOR P
WHERE S.PROFNO(+) = P.PROFNO;
--WHERE S.PROFNO(+) = P.PROFNO(+); ERROR

SELECT -- D1.DEPTNO, D1.DNAME, D1.COLLEGE, D2.DEPTNO, D2.DNAME, D2.COLLEGE FROM
D1.DNAME || '의 상위학과는 ' || NVL2(D2.DNAME, D2.DNAME || '입니다.', '없습니다.') AS RESULT
FROM DEPARTMENT D1 LEFT JOIN DEPARTMENT D2 ON D1.COLLEGE = D2.DEPTNO;
--FROM DEPARTMENT D1, DEPARTMENT D2
--WHERE D1.COLLEGE = D2.DEPTNO(+);S

-- 서브쿼리★
-- 1. 교수 테이블에서 "전은지" 교수의 직급검색 SQL 명령문 실행
-- 2. 교수 테이블의 직급 칼럼에서 1에서 얻은 결과값과 동일한 직급을 가진 교수 검색 명령문 실행
SELECT *
FROM PROFESSOR
WHERE POSITION = (
    SELECT POSITION
    FROM PROFESSOR
    WHERE NAME = '전은지'
);

SELECT POSITION
FROM PROFESSOR
WHERE NAME = '전은지';