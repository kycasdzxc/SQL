-- 교수 테이블에서 소속 학과에 따라 보너스를 다르게 계산하여 출력하여라.
-- 학과번호 별로 보너스는 다음과 같이 계산한다. 학과번호가 101이면 보너스는 급여의 10%, 102이면 20%, 201이면 30%, 나머지는 0%이다.
SELECT
    PROFNO, NAME, SAL, DEPTNO,
    DECODE(DEPTNO,
        101, SAL * 0.1,
        102, SAL * 0.2,
        201, SAL * 0.3,
        0
    ) BONUS,
    CASE DEPTNO
        WHEN 101 THEN SAL * 0.1
        WHEN 102 THEN SAL * 0.2
        WHEN 201 THEN SAL * 0.3
        ELSE 0
    END BONUS2
FROM PROFESSOR;

SELECT STUDNO, NAME, BIRTHDATE, TO_CHAR(BIRTHDATE, 'MM') M,
    CASE
        WHEN TO_CHAR(BIRTHDATE, 'MM') IN(3, 4, 5) THEN '봄'
        WHEN TO_CHAR(BIRTHDATE, 'MM') BETWEEN 6 AND 8 THEN '여름'
        WHEN TO_CHAR(BIRTHDATE, 'MM') BETWEEN 9 AND 11 THEN '가을'
        ELSE '겨울'
    END SEASON
FROM STUDENT;

SELECT
    STUDNO,
    NAME,
    BIRTHDATE,
    CASE
        WHEN M IN(3, 4, 5) THEN '봄'
        WHEN M BETWEEN 6 AND 8 THEN '여름'
        WHEN M BETWEEN 9 AND 11 THEN '가을'
        ELSE '겨울'
    END SEASON
FROM (
    SELECT STUDNO, NAME, BIRTHDATE, TO_CHAR(BIRTHDATE, 'MM') M
FROM STUDENT
);

-- GROUP : SUM, AVG, MAX, MIN, COUNT
SELECT DEPTNO, COUNT(DEPTNO)
FROM STUDENT
WHERE DEPTNO IS NOT NULL
GROUP BY DEPTNO
HAVING COUNT(DEPTNO) <= 5;

SELECT DEPTNO, COUNT(DEPTNO)
FROM STUDENT
GROUP BY DEPTNO;

-- 비슷하지만 다름
SELECT DISTINCT DEPTNO, COUNT(DEPTNO)
FROM STUDENT;

-- 101번 학과 교수 중에서 보직수당을 받는 교수의 수를 출력하여라.
SELECT COUNT(COMM)
FROM PROFESSOR
WHERE DEPTNO = 101;

SELECT COUNT(*) -- WHERE가 선행조건이기에 먼저 조건
FROM PROFESSOR
WHERE DEPTNO = 101 AND COMM IS NOT NULL;

SELECT *
FROM PROFESSOR
WHERE DEPTNO = 101;

-- 101번 학과 학생들의 몸무게 평균과 합계를 출력하여라.
SELECT SUM(WEIGHT) SUM, AVG(WEIGHT) AVG, SUM(WEIGHT) / COUNT(WEIGHT) AVG2
FROM STUDENT
WHERE DEPTNO = 101;

-- 102번 학과 학생 중에서 최대키와 최소키를 출력하여라.
SELECT MAX(HEIGHT), MIN(HEIGHT), SUM(HEIGHT), AVG(HEIGHT), COUNT(HEIGHT)
FROM STUDENT
WHERE DEPTNO = 102;

SELECT COUNT(DEPTNO)
FROM STUDENT
GROUP BY DEPTNO;

SELECT DEPTNO, POSITION, COUNT(*)
FROM PROFESSOR
GROUP BY DEPTNO, POSITION;

-- 교수 테이블에서 학과별로 교수 수와 보직수당을 받는 교수 수를 출력하여라.
SELECT DEPTNO, COUNT(*), COUNT(COMM)
FROM PROFESSOR
GROUP BY DEPTNO
ORDER BY 1;

-- 학과별로 소속 교수들의 평균급여, 최소급여, 최대급여를 출력하여라.
SELECT DEPTNO, AVG(SAL), MIN(SAL), MAX(SAL)
FROM PROFESSOR
GROUP BY DEPTNO
ORDER BY 1;

SELECT DEPTNO, SAL
FROM PROFESSOR
ORDER BY 1;

-- 전체 학생을 소속 학과별로 나누고, 같은 학과 학생은 다시 학년 별로 그룹핑하여,
-- 학과와 학년별 인원수, 평균 몸무게를 출력하여라. 단, 평균 몸무게는 소수점이 첫 번째 자리에서 반올림한다.
SELECT DEPTNO, GRADE, COUNT(*) COUNT, ROUND(AVG(WEIGHT)) AVG
FROM STUDENT
WHERE DEPTNO IS NOT NULL
GROUP BY DEPTNO, GRADE
ORDER BY 1, 2;

-- 소속 학과 별로 교수 급여합계와 모든 학과 교수들의 급여 합계를 출력하여라.
SELECT DEPTNO, SUM(SAL)
FROM PROFESSOR
GROUP BY ROLLUP(DEPTNO);

-- ROLLUP 연산자를 이용하여 학과 및 직급별 교수 수, 학과별 교수 수, 전체 교수 수를 출력하여라.
SELECT DEPTNO, POSITION, COUNT(*), GROUPING(DEPTNO), GROUPING(POSITION)
FROM PROFESSOR
GROUP BY ROLLUP(DEPTNO, POSITION);

SELECT DEPTNO, POSITION, COUNT(*), GROUPING(DEPTNO), GROUPING(POSITION)
FROM PROFESSOR
GROUP BY CUBE(DEPTNO, POSITION);

-- 학생 수가 4명 이상인 학년에 대해서 학년, 학생 수, 평균 키와 평균 몸무게를 출력하여라.
-- 단, 평균 키와 평균 몸무게는 소수점 첫 번째 자리에서 반올림하고, 출력 순서는 평균키가 높은 순부터 내림차순으로 출력하여라.
SELECT GRADE 학년, COUNT(*) 학생수, ROUND(AVG(HEIGHT)) 평균키, ROUND(AVG(WEIGHT)) 평균몸무게
FROM STUDENT
GROUP BY GRADE
-- WHERE COUNT(*) >= 4 ERROR
HAVING COUNT(*) >= 4
ORDER BY 3 DESC;
-- F10 해당 쿼리에 대한 실행계획

-- 학과별 학생의 평균 몸무게 중 최대 평균 몸무게를 출력하여라.
SELECT MAX(AVG(WEIGHT))
FROM STUDENT
GROUP BY DEPTNO;

-- 서브쿼리 써서 조인
SELECT DEPTNO, A_WEIGHT
FROM
    (SELECT DEPTNO, AVG(WEIGHT) A_WEIGHT
    FROM STUDENT
    GROUP BY DEPTNO) A,
    (SELECT MAX(AVG(WEIGHT)) B_WEIGHT
    FROM STUDENT
    GROUP BY DEPTNO) B
WHERE B.B_WEIGHT = A.A_WEIGHT
;

SELECT STUDNO, NAME, S.DEPTNO, DNAME-- DEPTNO일 경우, ERROR
FROM STUDENT S, DEPARTMENT D
WHERE S.DEPTNO = D.DEPTNO;

-- 내부 조인 : NULL 비포함
-- 외부 조인★ : NULL 포함

-- JOIN의 정석 예제
SELECT *
FROM
(
SELECT ROWNUM A
FROM DICT
WHERE ROWNUM <= 4
) A,
(
SELECT (ROWNUM-1) * 2 + 1 B
FROM DICT
WHERE ROWNUM <= 3
) B
WHERE A.A=B.B;

-- "전인하" 학생의 학번, 이름, 학과 이름 그리고 학과 위치를 출력하여라.
SELECT STUDNO, NAME, DNAME, LOC
FROM STUDENT S, DEPARTMENT D
WHERE NAME = '전인하' AND S.DEPTNO = D.DEPTNO;

-- SQL-99 자연조인
SELECT STUDNO, NAME, DNAME, LOC
FROM STUDENT
NATURAL JOIN DEPARTMENT
WHERE NAME = '전인하';

-- 학번, 학생이름, 교수번호, 담당교수이름
SELECT STUDNO, S.NAME S_NAME, P.PROFNO, P.NAME P_NAME
FROM STUDENT S, PROFESSOR P
WHERE S.PROFNO = P.PROFNO;

-- 안시조인
SELECT STUDNO, S.NAME S_NAME, P.PROFNO, P.NAME P_NAME
FROM STUDENT S
JOIN PROFESSOR P
ON S.PROFNO = P.PROFNO;

-- SELECT STUDNO, S.NAME S_NAME, P.PROFNO, P.NAME P_NAME - ERROR. 특정 식별자를 가지면 안된다
SELECT STUDNO, S.NAME S_NAME, PROFNO, P.NAME P_NAME
FROM STUDENT S
JOIN PROFESSOR P USING (PROFNO);

SELECT *
FROM PROFESSOR;